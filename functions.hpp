#ifndef _functions
#include "structs.hpp"

#define _functions

/* Bayes Vulnerability of a distribution D:
 * Adversary's probability of guessing a secret X in one try. */
long double bayesVulnerability(Distribution &D);

/* Bayes Vulnerability of a hyper-fistribution generated by channel C:
 * Adversary's probability of guessing a secret X in one try. */
long double posteriorBayesVulnerability(Channel &C);

/* Shannon Entropy of a distribution D:
 * A way to measure the secrecy of a set X of secrets. The value returned is 
 * in the interval [0,log2(D.n)], where D.n is the number of secrets. */
long double shannonEntropy(Distribution &D);

/* Shannon Entropy of a hyper-distribution generated by a channel C:
 * The value returned is in the interval [0,log2(C.y)], where C.y is the
 * number of outputs. */
long double posteriorShannonEntropy(Channel &C);

/* A function which measures how vulnerable a secret is.
 * It corresponds to the expected gain of an adversary through
 * actions in set W and secrets in set X. */
long double gVulnerability(Actions &W);

/* A function which measures how vulnerable a secret is after passing in a 
 * channel C. It corresponds to the expected gain of an adversary through
 * actions in set W and secrets in set X. */
long double posteriorGVulnerability(Channel &C, Actions &W);

/* The probability of the adversary guess the value of the secret correctly in
 * k tries, looking into a prior distribution. */
long double kTries(Distribution &D, int k);

/* The probability of the adversary guess the value of the secret correctly in
 * k tries, looking into a hyper-distribution. */
long double posteriorKTries(Channel &C, int k);

/* Guessing entropy of a distribution D. */
long double guessingEntropy(Distribution &D);

/* Guessing entropy of a hyper-distribution generated by a channel C. */
long double posteriorGuessingEntropy(Channel &C);

/* Leakage measures */

long double additiveLeakage(Channel &C, Actions &W);

long double multiplicativeLeakage(Channel &C, Actions &W);

#endif